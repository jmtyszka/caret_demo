install.packages("kernlab", dependencies=TRUE)
install.packages("ROCR", dependencies=TRUE)
install.packages("class", dependencies=TRUE)
install.packages("party", dependencies=TRUE)
install.packages("e1071", dependencies=TRUE)
install.packages("randomForest", dependencies=TRUE)
install.packages("FIACH",repos ="https://cran.r-project.org/")
library('FIACH')
library(FIACH)
install.packages("tkrplot")
install.packages("Rmpi")
install.packages("Rmpi")
install.packages("Rmpi")
install.packages("Rmpi")
install.packages("Matrix")
install.packages("Matrix")
install.packages("ggplot2")
install.packages("RISmed")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library("Matrix", lib.loc="/opt/local/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("RISmed", lib.loc="~/Library/R/3.4/library")
library("Matrix", lib.loc="~/Library/R/3.4/library")
library("compiler", lib.loc="/opt/local/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("codetools", lib.loc="/opt/local/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("cluster", lib.loc="/opt/local/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("boot", lib.loc="/opt/local/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("class", lib.loc="/opt/local/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("ggplot2")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Matrix")
install.packages("mvtboost")
library("gbm", lib.loc="~/Library/R/3.4/library")
library("mvtboost", lib.loc="~/Library/R/3.4/library")
library("RColorBrewer", lib.loc="~/Library/R/3.4/library")
library("Rcpp", lib.loc="~/Library/R/3.4/library")
library("RISmed", lib.loc="~/Library/R/3.4/library")
demo('mvtboost')
data(wellbeing)
Y <- wellbeing[,21:26]
X <- wellbeing[,1:20]
Ys <- scale(Y)
cont.id <- unlist(lapply(X,is.numeric))
Xs <- scale(X[,cont.id])
res <- mvtb(Y=Ys,X=Xs)
covex <- mvtb.covex(res, Y=Ys, X=Xs)
par(mar=c(4,7,1,1))
mvtb.heat(covex,cexRow=.8)
col <- colorRampPaletteAlpha(RColorBrewer::brewer.pal(9,"Greys"),100)
mvtb.heat(covex, Y=Ys, X=Xs, col=col, cexRow=.8)
par(mar=c(5,5,1,1))
mvtb.heat(t(mvtb.ri(res)),cexRow=.8,cexCol=1,dec=0)
data('wellbeing')
data(wellbeing)
?mvtb
library("mvtboost", lib.loc="~/Library/R/3.4/library")
?mvtb
data(wellbeing)
Y <- wellbeing[,21:26]
X <- wellbeing[,1:20]
Ys <- scale(Y)
cont.id <- unlist(lapply(X,is.numeric))
Xs <- scale(X[,cont.id])
res <- mvtb(Y=Ys,X=Xs)
covex <- mvtb.covex(res, Y=Ys, X=Xs)
par(mar=c(4,7,1,1))
mvtb.heat(covex,cexRow=.8)
col <- colorRampPaletteAlpha(RColorBrewer::brewer.pal(9,"Greys"),100)
mvtb.heat(covex, Y=Ys, X=Xs, col=col, cexRow=.8)
par(mar=c(5,5,1,1))
mvtb.heat(t(mvtb.ri(res)),cexRow=.8,cexCol=1,dec=0)
library("mvtboost", lib.loc="~/Library/R/3.4/library")
data(wellbeing)
Y <- wellbeing[,21:26]
X <- wellbeing[,1:20]
Ys <- scale(Y)
cont.id <- unlist(lapply(X,is.numeric))
Xs <- scale(X[,cont.id])
res <- mvtb(Y=Ys,X=Xs)
covex <- mvtb.covex(res, Y=Ys, X=Xs)
par(mar=c(4,7,1,1))
mvtb.heat(covex,cexRow=.8)
col <- colorRampPaletteAlpha(RColorBrewer::brewer.pal(9,"Greys"),100)
mvtb.heat(covex, Y=Ys, X=Xs, col=col, cexRow=.8)
par(mar=c(5,5,1,1))
mvtb.heat(t(mvtb.ri(res)),cexRow=.8,cexCol=1,dec=0)
data(wellbeing)
Y <- wellbeing[,21:26]
X <- wellbeing[,1:20]
Ys <- scale(Y)
cont.id <- unlist(lapply(X,is.numeric))
Xs <- scale(X[,cont.id])
res <- mvtb(Y=Ys,X=Xs)
covex <- mvtb.covex(res, Y=Ys, X=Xs)
par(mar=c(4,7,1,1))
mvtb.heat(covex,cexRow=.8)
col <- colorRampPaletteAlpha(RColorBrewer::brewer.pal(9,"Greys"),100)
mvtb.heat(covex, Y=Ys, X=Xs, col=col, cexRow=.8)
par(mar=c(5,5,1,1))
mvtb.heat(t(mvtb.ri(res)),cexRow=.8,cexCol=1,dec=0)
X
head(X)
vignette("mvtboost_vignette")
vignette("mvtboost_wellbeing")
data(wellbeing)
Y <- wellbeing[,21:26]
X <- wellbeing[,1:20]
Ys <- scale(Y)
cont.id <- unlist(lapply(X,is.numeric))
Xs <- scale(X[,cont.id])
res <- mvtb(Y=Ys,X=Xs)
covex <- mvtb.covex(res, Y=Ys, X=Xs)
par(mar=c(4,7,1,1))
mvtb.heat(covex,cexRow=.8)
col <- colorRampPaletteAlpha(RColorBrewer::brewer.pal(9,"Greys"),100)
mvtb.heat(covex, Y=Ys, X=Xs, col=col, cexRow=.8)
par(mar=c(5,5,1,1))
mvtb.heat(t(mvtb.ri(res)),cexRow=.8,cexCol=1,dec=0)
library(mvtboost)
data("mpg",package="ggplot2")
Y <- mpg[,c("cty","hwy")]      # use both city and highway mileage as dvs
Ys <- scale(Y)                 # recommended that outcomes are on same scale
X <- mpg[,-c(2,8:9)]           # manufacturer, displacement, year, cylinder, transmission,drive, class
char.ids <- unlist(lapply(X,is.character))
X[,char.ids] <- lapply(X[,char.ids],as.factor)
out <- mvtb(Y=Ys,X=X,          # data
n.trees=1000,          # number of trees
shrinkage=.01,         # shrinkage or learning rate
interaction.depth=3)   # tree or interaction depth
library(foreign)
file.choose()
db = file.choose()
dataset = read.spss(db, to.data.frame=TRUE)
db = file.choose()
dataset = read.spss(db, to.data.frame=TRUE)
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("data.table")
install.packages("caret")
# Import packages
library(splitstackshape)
install.packages("splitstackshape")
# User selected file from Qualtrics
data_fname <- "Results.txt"
source('~/GitHub/caret_demo/NTB-SNI_Prediction.R')
install.packages("splitstackshape")
install.packages("splitstackshape")
source('~/GitHub/caret_demo/NTB-SNI_Prediction.R')
install.packages("Yeslibrary")
source('~/GitHub/caret_demo/NTB-SNI_Prediction.R')
install.packages("doBy")
install.packages("gdata")
install.packages("ggplot2")
install.packages("Metrics")
source('~/GitHub/caret_demo/NTB-SNI_Prediction.R')
source('~/GitHub/caret_demo/NTB-SNI_Prediction.R')
plot(cars)
# Import packages
library(splitstackshape)
library(plyr)
library(doBy)
library(gdata)
library(ggplot2)
library(Metrics)
# Flags
do_scatterplot = FALSE
do_preproc_checks = FALSE
# Regressors to tune
do_mvtb   = FALSE  # Multivariate tree boosting
do_gbm    = TRUE   # Gradient boosted trees
do_lrback = TRUE   # Linear regression with backwards selection
# User selected file from Qualtrics
data_fname <- "Results.txt"
# Read TSV data
X <- read.table(data_fname, sep="\t", header=TRUE, fill=TRUE)
# Import packages
library(splitstackshape)
library(plyr)
library(doBy)
library(gdata)
library(ggplot2)
library(Metrics)
# Flags
do_scatterplot = FALSE
do_preproc_checks = FALSE
# Regressors to tune
do_mvtb   = FALSE  # Multivariate tree boosting
do_gbm    = TRUE   # Gradient boosted trees
do_lrback = TRUE   # Linear regression with backwards selection
# User selected file from Qualtrics
data_fname <- "Results.txt"
# Read TSV data
X <- read.table(data_fname, sep="\t", header=TRUE, fill=TRUE)
# The variables of interest are:
# (Q3 (Age))
# NIHTB_Emotional_Support
# NIHTB_Friendship
# NIHTB_Loneliness
# NIHTB_Instrumetnal_Support
# NIHTB_Perceived_Hostility
# NIHTB_Perceived_Rejection
# SNI_Ex_People_Count
# SNI_Ex_Embed_Networks
# SNI_Ex_Network_Diversity
myvars <- c('NIHTB_Emotional_Support',
'NIHTB_Friendship',
'NIHTB_Loneliness',
'NIHTB_Instrumental_Support',
'NIHTB_Perceived_Hostility',
'NIHTB_Perceived_Rejection',
'SNI_Ex_People_Count',
'SNI_Ex_Embed_Networks',
'SNI_Ex_Network_Diversity')
#-------------------
# Exclusion Criteria
#-------------------
# Exclude initial debugging runs (Excluded = "SAMPLE_NONE")
X_good <- X[X$Excluded != "SAMPLE_NONE", myvars]
# Exclude any rows containing NA in any column (incomplete cases)
X_good <- X_good[complete.cases(X_good),]
if (do_scatterplot) {
require(car)
# Style constants
plot.width = 10
plot.height = 8
# Pairwise scatterplots
scatterplotMatrix(X_good)
}
# Extract included NIHTB and SNI measures
NTB <- X_good[, colnames(X_good) %like% "NIHTB"] * 1.0
# Import packages
library(splitstackshape)
library(plyr)
library(doBy)
library(gdata)
library(ggplot2)
library(Metrics)
# Flags
do_scatterplot = FALSE
do_preproc_checks = FALSE
# Regressors to tune
do_mvtb   = FALSE  # Multivariate tree boosting
do_gbm    = TRUE   # Gradient boosted trees
do_lrback = TRUE   # Linear regression with backwards selection
# User selected file from Qualtrics
data_fname <- "Results.txt"
# Read TSV data
X <- read.table(data_fname, sep="\t", header=TRUE, fill=TRUE)
# The variables of interest are:
# (Q3 (Age))
# NIHTB_Emotional_Support
# NIHTB_Friendship
# NIHTB_Loneliness
# NIHTB_Instrumetnal_Support
# NIHTB_Perceived_Hostility
# NIHTB_Perceived_Rejection
# SNI_Ex_People_Count
# SNI_Ex_Embed_Networks
# SNI_Ex_Network_Diversity
myvars <- c('NIHTB_Emotional_Support',
'NIHTB_Friendship',
'NIHTB_Loneliness',
'NIHTB_Instrumental_Support',
'NIHTB_Perceived_Hostility',
'NIHTB_Perceived_Rejection',
'SNI_Ex_People_Count',
'SNI_Ex_Embed_Networks',
'SNI_Ex_Network_Diversity')
# Import packages
library(splitstackshape)
library(plyr)
library(doBy)
library(gdata)
library(ggplot2)
library(Metrics)
# Flags
do_scatterplot = FALSE
do_preproc_checks = FALSE
# Regressors to tune
do_mvtb   = FALSE  # Multivariate tree boosting
do_gbm    = TRUE   # Gradient boosted trees
do_lrback = TRUE   # Linear regression with backwards selection
# User selected file from Qualtrics
data_fname <- "Results.txt"
# Read TSV data
X <- read.table(data_fname, sep="\t", header=TRUE, fill=TRUE)
# The variables of interest are:
# (Q3 (Age))
# NIHTB_Emotional_Support
# NIHTB_Friendship
# NIHTB_Loneliness
# NIHTB_Instrumetnal_Support
# NIHTB_Perceived_Hostility
# NIHTB_Perceived_Rejection
# SNI_Ex_People_Count
# SNI_Ex_Embed_Networks
# SNI_Ex_Network_Diversity
myvars <- c('NIHTB_Emotional_Support',
'NIHTB_Friendship',
'NIHTB_Loneliness',
'NIHTB_Instrumental_Support',
'NIHTB_Perceived_Hostility',
'NIHTB_Perceived_Rejection',
'SNI_Ex_People_Count',
'SNI_Ex_Embed_Networks',
'SNI_Ex_Network_Diversity')
# Import packages
library(splitstackshape)
library(plyr)
library(doBy)
library(gdata)
library(ggplot2)
library(Metrics)
# Flags
do_scatterplot = FALSE
do_preproc_checks = FALSE
# Regressors to tune
do_mvtb   = FALSE  # Multivariate tree boosting
do_gbm    = TRUE   # Gradient boosted trees
do_lrback = TRUE   # Linear regression with backwards selection
# User selected file from Qualtrics
data_fname <- "Results.txt"
# Read TSV data
X <- read.table(data_fname, sep="\t", header=TRUE, fill=TRUE)
# The variables of interest are:
# (Q3 (Age))
# NIHTB_Emotional_Support
# NIHTB_Friendship
# NIHTB_Loneliness
# NIHTB_Instrumetnal_Support
# NIHTB_Perceived_Hostility
# NIHTB_Perceived_Rejection
# SNI_Ex_People_Count
# SNI_Ex_Embed_Networks
# SNI_Ex_Network_Diversity
myvars <- c('NIHTB_Emotional_Support',
'NIHTB_Friendship',
'NIHTB_Loneliness',
'NIHTB_Instrumental_Support',
'NIHTB_Perceived_Hostility',
'NIHTB_Perceived_Rejection',
'SNI_Ex_People_Count',
'SNI_Ex_Embed_Networks',
'SNI_Ex_Network_Diversity')
# Regressors to tune
do_mvtb   = FALSE  # Multivariate tree boosting
do_gbm    = TRUE   # Gradient boosted trees
do_lrback = TRUE   # Linear regression with backwards selection
# User selected file from Qualtrics
data_fname <- "Results.txt"
# Read TSV data
X <- read.table(data_fname, sep="\t", header=TRUE, fill=TRUE)
# The variables of interest are:
# (Q3 (Age))
# NIHTB_Emotional_Support
# NIHTB_Friendship
# NIHTB_Loneliness
# NIHTB_Instrumetnal_Support
# NIHTB_Perceived_Hostility
# NIHTB_Perceived_Rejection
# SNI_Ex_People_Count
# SNI_Ex_Embed_Networks
# SNI_Ex_Network_Diversity
myvars <- c('NIHTB_Emotional_Support',
'NIHTB_Friendship',
'NIHTB_Loneliness',
'NIHTB_Instrumental_Support',
'NIHTB_Perceived_Hostility',
'NIHTB_Perceived_Rejection',
'SNI_Ex_People_Count',
'SNI_Ex_Embed_Networks',
'SNI_Ex_Network_Diversity')
# The variables of interest are:
# (Q3 (Age))
# NIHTB_Emotional_Support
# NIHTB_Friendship
# NIHTB_Loneliness
# NIHTB_Instrumetnal_Support
# NIHTB_Perceived_Hostility
# NIHTB_Perceived_Rejection
# SNI_Ex_People_Count
# SNI_Ex_Embed_Networks
# SNI_Ex_Network_Diversity
myvars <- c('NIHTB_Emotional_Support',
'NIHTB_Friendship',
'NIHTB_Loneliness',
'NIHTB_Instrumental_Support',
'NIHTB_Perceived_Hostility',
'NIHTB_Perceived_Rejection',
'SNI_Ex_People_Count',
'SNI_Ex_Embed_Networks',
'SNI_Ex_Network_Diversity')
# Read TSV data
X <- read.table(data_fname, sep="\t", header=TRUE, fill=TRUE)
getcd()
getwd()
# Import packages
library(splitstackshape)
library(plyr)
library(doBy)
library(gdata)
library(ggplot2)
library(Metrics)
# Flags
do_scatterplot = FALSE
do_preproc_checks = FALSE
# Set working directory
setwd("/Users/jmt/GitHub/caret_demo")
# Read TSV data
X <- read.table("Results.txt", sep="\t", header=TRUE, fill=TRUE)
getwd()
# Import packages
library(splitstackshape)
library(plyr)
library(doBy)
library(gdata)
library(ggplot2)
library(Metrics)
# Flags
do_scatterplot = FALSE
do_preproc_checks = FALSE
# Set working directory
setwd("/Users/jmt/GitHub/caret_demo")
getwd()
setwd("/Users/jmt/GitHub/caret_demo")
getwd()
# Set working directory
setwd("/Users/jmt/GitHub/caret_demo")
# Read TSV data
X <- read.table("Results.txt", sep="\t", header=TRUE, fill=TRUE)
# Set working directory
setwd("/Users/jmt/GitHub/caret_demo")
# Read TSV data
X <- read.table("Results.txt", sep="\t", header=TRUE, quote="", fill=TRUE)
# The variables of interest are:
# (Q3 (Age))
# NIHTB_Emotional_Support
# NIHTB_Friendship
# NIHTB_Loneliness
# NIHTB_Instrumetnal_Support
# NIHTB_Perceived_Hostility
# NIHTB_Perceived_Rejection
# SNI_Ex_People_Count
# SNI_Ex_Embed_Networks
# SNI_Ex_Network_Diversity
myvars <- c('NIHTB_Emotional_Support',
'NIHTB_Friendship',
'NIHTB_Loneliness',
'NIHTB_Instrumental_Support',
'NIHTB_Perceived_Hostility',
'NIHTB_Perceived_Rejection',
'SNI_Ex_People_Count',
'SNI_Ex_Embed_Networks',
'SNI_Ex_Network_Diversity')
#-------------------
# Exclusion Criteria
#-------------------
# Exclude initial debugging runs (Excluded = "SAMPLE_NONE")
X_good <- X[X$Excluded != "SAMPLE_NONE", myvars]
# Exclude any rows containing NA in any column (incomplete cases)
X_good <- X_good[complete.cases(X_good),]
if (do_scatterplot) {
require(car)
# Style constants
plot.width = 10
plot.height = 8
# Pairwise scatterplots
scatterplotMatrix(X_good)
}
# Extract included NIHTB and SNI measures
NTB <- X_good[, colnames(X_good) %like% "NIHTB"] * 1.0
# Import packages
library(splitstackshape)
library(plyr)
library(doBy)
library(gdata)
library(ggplot2)
library(Metrics)
# Flags
do_scatterplot = FALSE
do_preproc_checks = FALSE
#-------------------
# Exclusion Criteria
#-------------------
# Exclude initial debugging runs (Excluded = "SAMPLE_NONE")
X_good <- X[X$Excluded != "SAMPLE_NONE", myvars]
# Exclude any rows containing NA in any column (incomplete cases)
X_good <- X_good[complete.cases(X_good),]
if (do_scatterplot) {
require(car)
# Style constants
plot.width = 10
plot.height = 8
# Pairwise scatterplots
scatterplotMatrix(X_good)
}
# Extract included NIHTB and SNI measures
NTB <- X_good[, colnames(X_good) %like% "NIHTB"] * 1.0
colnames(X_good) %like% "NIHTB"
colnames(X_good)
